################################################################################
# This subworkflow aims at processing the ChIP-seq data. The dataset can be
# found in ../input_table/data_mouse_multireads.csv.
#
# Nicolas Descostes
################################################################################



###############################################################################
# Imports
###############################################################################

import pandas
import os

###############################################################################
# Config Variables
###############################################################################

try:
  input_table = config["samples"]["summaryFile"]
except KeyError:
  print("The parameter \"summaryFile\" in section \"samples\" has not been \
    defined. The pipeline cannot start.")


###############################################################################
# CHECK EXISTENCE OF FILES
###############################################################################

if not os.path.isfile(input_table):
        raise IOError("File \"" + input_table + "\" (defined in " + 
            config["samples"]["summaryFile"] + ") not found.")



###############################################################################
# Functions
###############################################################################


def read_samplesTable(inputTable):
    data = pandas.read_csv(inputTable)
    # Verify column names
    if not {'sraname', 'samples', 'run', 'link', 'organism', 'name', 'input', 
        'experiment_title', 'cell_line', 'rep', 'study_name', 'library_strategy', 
        'library_layout', 'study_title', 
        'read_length_max'}.issubset(data.columns.values):
            raise KeyError("The samples file must contain the following \
                named columns: 'sraname', 'samples', 'run', 'link', 'organism',\
                'name', 'input', 'experiment_title', 'cell_line', 'rep',\
                'study_name', 'library_strategy', 'library_layout', \
                'study_title', 'read_length_max'")
    return data

def genome_files():
    link_chr1=config["genome"]["fastaChr1Link"]
    all_links = []
    all_chr = list(range(1,20)) + list('X') + list('Y')
    
    for chr in all_chr:
        all_links.append(link_chr1.replace("chromosome.1", "chromosome." + str(chr), 1))
    
    return all_links


###############################################################################
# Reading input table
###############################################################################


samplesData = read_samplesTable(input_table)


###############################################################################
# Parameters checking
###############################################################################

# Checking organism definition
tableorg = samplesData['organism'].unique() 
testorg = ['Mus_musculus'] 
if not (testorg == tableorg).all():
    raise KeyError("All samples should belong to Mus musculus, check your \
        summaryFile.")

# Checking the library strategy
tablestrategy = samplesData['library_strategy'].unique()
teststrategy = ['ChIP-Seq']
if not (teststrategy == tablestrategy).all():
    raise KeyError("All samples should be ChIP-Seq experiments, check your \
        summaryFile.")

# Checking the library layout
tablelayout = samplesData['library_layout'].unique()
testlayoutsingle = ['SINGLE']
testlayoutpaired = ['PAIRED']

if (testlayoutpaired == tablelayout).all():
    print("\n\n ## The table is only composed of paired-end experiments ##\n")
elif (testlayoutsingle == tablelayout).all():
    print("\n\n ## The table is only composed of single-end experiments ##\n")
elif ((testlayoutsingle == tablelayout) | 
    (testlayoutpaired == tablelayout)).all():
    print("\n\n ## The table is composed of single-end and paired-end \
        experiments ##\n")
else:
    raise KeyError("All samples should be single or paired end, check your \
        summaryFile.")



###############################################################################
# Variables definition
###############################################################################

# Splitting the table into single or paired end experiments

index_single = samplesData['library_layout'] == 'SINGLE'
index_paired = samplesData['library_layout'] == 'PAIRED'
samplesData_single = samplesData[index_single]
samplesData_paired = samplesData[index_paired]

# Output files names

SINGLESAMPLES = samplesData_single['samples'].tolist()
PAIREDSAMPLES = samplesData_paired['samples'].tolist()

# For Retrieving links to download sra files

samples_single_df = pandas.DataFrame(samplesData_single).set_index("samples",
    drop=False)
samples_paired_df = pandas.DataFrame(samplesData_paired).set_index("samples",
    drop=False)

# Information regarding the genome
GENOMEID=config["genome"]["ID"]
GENOMELINKS=genome_files()
PREFIXFASTAGTF=config["genome"]["prefix"]
VERSION=config["genome"]["version"]

# Information for alignment with Bowtie2
MULTITHRESHOLD=["10", "50", "100", "150"]



###############################################################################
# Rules
###############################################################################


rule all:
  input:
    expand("../results/data/fasta/{genome}/{prefix}.dna.chromosome.fa",
        genome = GENOMEID, prefix = PREFIXFASTAGTF),
    expand("../results/data/gtf/{genome}/{prefix}.{version}.chr.gtf",
        genome = GENOMEID, prefix = PREFIXFASTAGTF, version = VERSION),
    expand("../results/data/gff/{genome}/{prefix}.{version}.chr.gff3",
        genome = GENOMEID, prefix = PREFIXFASTAGTF, version = VERSION),
    expand("../results/data/bowtie2_index/{genome}/{prefix}.1.bt2",
        genome = GENOMEID, prefix = PREFIXFASTAGTF),
    expand("../results/data/bowtie2_index/{genome}/{prefix}.2.bt2",
        genome = GENOMEID, prefix = PREFIXFASTAGTF),
    expand("../results/data/bowtie2_index/{genome}/{prefix}.3.bt2",
        genome = GENOMEID, prefix = PREFIXFASTAGTF),
    expand("../results/data/bowtie2_index/{genome}/{prefix}.4.bt2",
        genome = GENOMEID, prefix = PREFIXFASTAGTF),
    expand("../results/data/bowtie2_index/{genome}/{prefix}.rev.1.bt2",
        genome = GENOMEID, prefix = PREFIXFASTAGTF),
    expand("../results/data/bowtie2_index/{genome}/{prefix}.rev.2.bt2",
        genome = GENOMEID, prefix = PREFIXFASTAGTF),
    #expand("../results/data/sra/single/{singleEndName}", 
    #    singleEndName = SINGLESAMPLES),
    #expand("../results/data/sra/paired/{pairedEndName}", 
    #    pairedEndName = PAIREDSAMPLES),
    #expand("../results/data/single/{singleEndName}.fastq",
    #    singleEndName = SINGLESAMPLES),
    #expand("data/paired/{pairedEndName}_1.fastq",
    #    pairedEndName = PAIREDSAMPLES),
    #expand("data/paired/{pairedEndName}_2.fastq",
    #    pairedEndName = PAIREDSAMPLES),
    #expand("../results/data/single/{singleEndName}.fastq.gz",
    #    singleEndName = SINGLESAMPLES),
    #expand("../results/data/paired/{pairedEndName}_1.fastq.gz",
    #    pairedEndName = PAIREDSAMPLES),
    #expand("../results/data/paired/{pairedEndName}_2.fastq.gz",
    #    pairedEndName = PAIREDSAMPLES)
    expand("../results/qc/fastqc/raw_fastq/single/{singleEndName}_fastqc.html",
        singleEndName = SINGLESAMPLES),
    expand("../results/qc/fastqc/raw_fastq/single/{singleEndName}_fastqc.zip",
        singleEndName = SINGLESAMPLES),
    expand("../results/qc/fastqc/raw_fastq/paired/{pairedEndName}_1_fastqc.html",
        pairedEndName = PAIREDSAMPLES),
    expand("../results/qc/fastqc/raw_fastq/paired/{pairedEndName}_1_fastqc.zip",
        pairedEndName = PAIREDSAMPLES),
    expand("../results/qc/fastqc/raw_fastq/paired/{pairedEndName}_2_fastqc.html",
        pairedEndName = PAIREDSAMPLES),
    expand("../results/qc/fastqc/raw_fastq/paired/{pairedEndName}_2_fastqc.zip",
        pairedEndName = PAIREDSAMPLES),
    expand("../results/data/single/trimmed/{singleEndName}_trimmed.fq.gz",
        singleEndName = SINGLESAMPLES),
    expand("../results/data/single/trimmed/{singleEndName}.fastq.gz_trimming_report.txt",
        singleEndName = SINGLESAMPLES),
    expand("../results/data/paired/trimmed/{pairedEndName}_1_val_1.fq.gz",
        pairedEndName = PAIREDSAMPLES),
    expand("../results/data/paired/trimmed/{pairedEndName}_1.fastq.gz_trimming_report.txt",
        pairedEndName = PAIREDSAMPLES),
    expand("../results/data/paired/trimmed/{pairedEndName}_2_val_2.fq.gz",
        pairedEndName = PAIREDSAMPLES),
    expand("../results/data/paired/trimmed/{pairedEndName}_2.fastq.gz_trimming_report.txt",
        pairedEndName = PAIREDSAMPLES),
    expand("../results/qc/fastqc/trimmed_fastq/single/{singleEndName}_trimmed_fastqc.html",
        singleEndName = SINGLESAMPLES),
    expand("../results/qc/fastqc/trimmed_fastq/single/{singleEndName}_trimmed_fastqc.zip",
        singleEndName = SINGLESAMPLES),
    expand("../results/qc/fastqc/trimmed_fastq/paired/{pairedEndName}_1_val_1_fastqc.html",
        pairedEndName = PAIREDSAMPLES),
    expand("../results/qc/fastqc/trimmed_fastq/paired/{pairedEndName}_1_val_1_fastqc.zip",
        pairedEndName = PAIREDSAMPLES),
    expand("../results/qc/fastqc/trimmed_fastq/paired/{pairedEndName}_2_val_2_fastqc.html",
        pairedEndName = PAIREDSAMPLES),
    expand("../results/qc/fastqc/trimmed_fastq/paired/{pairedEndName}_2_val_2_fastqc.zip",
        pairedEndName = PAIREDSAMPLES),
    expand("../results/bam/single/bowtie2_results/{genome}/{singleEndName}_trimmed_best.sam",
        genome = GENOMEID, singleEndName = SINGLESAMPLES),
    expand("../results/bam/single/bowtie2_results/{genome}/{singleEndName}_trimmed_best.log",
        genome = GENOMEID, singleEndName = SINGLESAMPLES),
    expand("../results/bam/single/bowtie2_results/{genome}/{singleEndName}_trimmed_k{multi}.sam",
        genome = GENOMEID, singleEndName = SINGLESAMPLES, multi = MULTITHRESHOLD),
    expand("../results/bam/single/bowtie2_results/{genome}/{singleEndName}_trimmed_k{multi}.log",
        genome = GENOMEID, singleEndName = SINGLESAMPLES, multi = MULTITHRESHOLD),
    expand("../results/bam/single/bowtie2_results/{genome}/{singleEndName}_trimmed_all.sam",
        genome = GENOMEID, singleEndName = SINGLESAMPLES),
    expand("../results/bam/single/bowtie2_results/{genome}/{singleEndName}_trimmed_all.log",
        genome = GENOMEID, singleEndName = SINGLESAMPLES),
    expand("../results/bam/paired/bowtie2_results/{genome}/{pairedEndName}_trimmed_best.sam",
        genome = GENOMEID, pairedEndName = PAIREDSAMPLES),
    expand("../results/bam/paired/bowtie2_results/{genome}/{pairedEndName}_trimmed_best.log",
        genome = GENOMEID, pairedEndName = PAIREDSAMPLES),
    expand("../results/bam/paired/bowtie2_results/{genome}/{pairedEndName}_trimmed_k{multi}.sam",
        genome = GENOMEID, pairedEndName = PAIREDSAMPLES, multi = MULTITHRESHOLD),
    expand("../results/bam/paired/bowtie2_results/{genome}/{pairedEndName}_trimmed_k{multi}.log",
        genome = GENOMEID, pairedEndName = PAIREDSAMPLES, multi = MULTITHRESHOLD),
    expand("../results/bam/paired/bowtie2_results/{genome}/{pairedEndName}_trimmed_all.sam",
        genome = GENOMEID, pairedEndName = PAIREDSAMPLES),
    expand("../results/bam/paired/bowtie2_results/{genome}/{pairedEndName}_trimmed_all.log",
        genome = GENOMEID, pairedEndName = PAIREDSAMPLES)




include: "rules/download.smk"
include: "rules/conversions.smk"
include: "rules/trimming.smk"
include: "rules/qc.smk"
include: "rules/bowtie2.smk"
